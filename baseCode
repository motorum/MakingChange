 int[] covers = { x, y, z};//set the number of pannels we will use
    int[] counts = new int[covers.Length];//set the default counts array = number of covers used
    int totalAmount = u;
    
    Combination(covers, counts, 0, totalAmount); //notice default initial startIndex = 0
    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    A = counts;

  }
  public void Combination(int[] covers, int[] counts, int startIndex, int totalAmount)
  {
    if (startIndex >= covers.Length)//we have processed all covers
    {
      for (int i = 0; i < covers.Length; i++)
        Print("" + counts[i] + " counts of cover width: " + covers[i] + "+"); //format the print out as "amount=?*25 + ?*10+..."
      Print("\n"); //need a new line per case
      return;
    }
    
    //other wise we need proceed
    //but notice if startIndex is the last one, we need check if it can be dividable by the smallest coin
    //if so, this is a good combination, otherwise, this is not possible combination thus discarded
    if (startIndex == covers.Length - 1)
    {
      if (totalAmount % covers[startIndex] == 0)//good combination
      {
        counts[startIndex] = totalAmount / covers[startIndex]; //set the counts of coins at start index
        Combination(covers, counts, startIndex + 1, 0); //proceed to recursive call //notice startIndex+1 and remaining amount = 0
      }
    }
    else//we still have option to choose 0-N larger coins
    {
      for (int i = 0; i <= totalAmount / covers[startIndex]; i++)
      {
        counts[startIndex] = i; //for every cycle in a loop, we choose an arbitrary number of larger coins and proceed next
        Combination(covers, counts, startIndex + 1, totalAmount - covers[startIndex] * i); //notice we need update the remaining amount
      }
      
    }
